{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  /*\r\n  *El metodo que vamos a hacer para el login es un observable\r\n   *Tener en cuenta tipar la solucion\r\n  */\n  login(email, password) {\n    let body = {\n      email: email,\n      password: password\n    };\n    //Devolvemos la respuesta del observable cuando la peticion http se complete, el componente suscrito accedera al token de login,\n    //y despues lo podemos guardar en el sesionEstory, (podemos hacer una con django, Node)\n    return this.http.post('https://reqres.in/api/login', body);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAiBA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAiB;EAEzC;;;;EAIAC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IAEnC,IAAIC,IAAI,GAAG;MACTF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;KACX;IAED;IACA;IACA,OAAO,IAAI,CAACH,IAAI,CAACK,IAAI,CAAC,6BAA6B,EAAED,IAAI,CAAC;EAE5D;;AAnBWN,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAQ,SAAXR,WAAW;EAAAS,YAHV;AAAM","names":["AuthService","constructor","http","login","email","password","body","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Guedys\\Documents\\ANGULAR-TYPESCRIPT\\OpenBootCamp\\Angular-OpenBootCamp\\HolaMundo\\src\\app\\services\\auth.service.ts"],"sourcesContent":["//Este servicio se crea para hacer una peticion Http\r\n\r\n/* Vamos a hacer un proceso de login y logout\r\n* 1- Tenemos que inyectar el servicio httpClient en el constructor\r\n* 2- No la deberiamos hacer dentro de un componente, las hacemos en un servicio, y este comparte con los componentes que lo necesiten\r\n* 3- hay que generarar un componente en este caso un formulario de login, para el ejemplo se crea un loginForm\r\n* 4- injectamos el servicio en el ngOnInit del componente\r\n*/\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class AuthService {\r\n\r\n  constructor(private http: HttpClient ) { }\r\n\r\n  /*\r\n  *El metodo que vamos a hacer para el login es un observable\r\n   *Tener en cuenta tipar la solucion\r\n  */\r\n  login(email: string, password: string): Observable<any> {\r\n\r\n    let body = {\r\n      email: email,\r\n      password: password\r\n    }\r\n\r\n    //Devolvemos la respuesta del observable cuando la peticion http se complete, el componente suscrito accedera al token de login,\r\n    //y despues lo podemos guardar en el sesionEstory, (podemos hacer una con django, Node)\r\n    return this.http.post('https://reqres.in/api/login', body);\r\n \r\n  }\r\n}\r\n\r\n/*\r\n*Aquel componente que necesite de este metodo tendria que injectar este servicio\r\ny tendria que hacer una llamada el metodo de login: le podemos pasar el tipo de respuesta\r\n*Json\r\n*Parametros\r\n*contextos\r\n*Cabeceras\r\n\r\nyo envio algo a una ruta en este caso a: https://reqres.in/api/login  a esta ruta le quiero mandar el body, y lo que devuelvo es el observable\r\n*/\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
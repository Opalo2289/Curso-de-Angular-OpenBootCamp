{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = function () {\n  return {\n    color: \"blue\"\n  };\n};\nexport class SaludoComponent {\n  constructor() {\n    //aqui deben declararce las variables. ejemplo const\n    this.nombre = 'Anonimo'; //del padre al hijo\n    this.mensajeEmiter = new EventEmitter(); //sirve para gestionar eventos de abajo hacia arriba,  hijo al padre, el componente superiro debe siempre tener la logica\n  }\n\n  ngOnInit() {\n    //instrucciones previas a la renderizacion del componente\n    console.log('ngOnInit del componente saludo');\n  }\n  ngOnChanges(changes) {\n    console.log('CAMBIO: valor anterior:', changes['nombre'].previousValue);\n    console.log('ngOnChange el componente recibe cambios', changes['nombre'].currentValue);\n  }\n  ngOnDestroy() {\n    console.log('ngOnDestroy el componente va a desaparecer');\n  }\n  /*aqui se ve en que consiste los metodos, y esto es lo que desencadena los eventos.\r\n  en este casovamos a hacer un metodo para gestionar una alerta.\r\n  alertaSaludo(): void {\r\n    alert (`hola, ${this.nombre}, alerta despachada desde un click de boton`);\r\n  }*/\n  //ahora utilizando el ejemplo modificado de arriba vamos a gestionar un evento de tipo click\n  //en el DOM y enviar un texto al componente padre, despues esto se debe pintar en el html\n  enviarMensajeAlPadre() {\n    this.mensajeEmiter.emit(`hola, ${this.nombre}, alerta despachada desde un click de boton`); //no se puede ejecutar un object porque en el @output esta asignado como <string>\n  }\n}\n\nSaludoComponent.ɵfac = function SaludoComponent_Factory(t) {\n  return new (t || SaludoComponent)();\n};\nSaludoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SaludoComponent,\n  selectors: [[\"app-saludo\"]],\n  inputs: {\n    nombre: \"nombre\"\n  },\n  outputs: {\n    mensajeEmiter: \"mensajeEmiter\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 7,\n  vars: 5,\n  consts: [[\"id\", \"usuario\", 3, \"ngClass\", \"innerText\"], [3, \"ngStyle\"], [\"id\", \"emit-alerta\", 3, \"click\"]],\n  template: function SaludoComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"h3\", 0);\n      i0.ɵɵelementStart(3, \"h5\", 1);\n      i0.ɵɵtext(4, \" hola que tal\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function SaludoComponent_Template_button_click_5_listener() {\n        return ctx.enviarMensajeAlPadre();\n      });\n      i0.ɵɵtext(6, \"enviar mensaje de saludo al compnente padre\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"!Hola \", ctx.nombre, \"\\u00A1\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", ctx.nombre == \"Anonimo\" ? \"anonimo\" : \"saludo\")(\"innerText\", ctx.nombre);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(4, _c0));\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgStyle],\n  styles: [\"h1[_ngcontent-%COMP%] {\\n  color: tomato;\\n}\\n\\n.anonimo[_ngcontent-%COMP%] {\\n  color: gray;\\n}\\n\\n.saludo[_ngcontent-%COMP%] {\\n  color: greenyellow;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9zYWx1ZG8vc2FsdWRvLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBQTtBQUNKOztBQUVBO0VBQ0ksV0FBQTtBQUNKOztBQUVBO0VBQ0ksa0JBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbImgxIHtcclxuICAgIGNvbG9yOiB0b21hdG9cclxufVxyXG5cclxuLmFub25pbW8ge1xyXG4gICAgY29sb3I6IGdyYXk7XHJcbn1cclxuXHJcbi5zYWx1ZG8ge1xyXG4gICAgY29sb3I6IGdyZWVueWVsbG93O1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAA2CA,YAAY,QAA6C,eAAe;;;;;;;;AAOnH,OAAM,MAAOC,eAAe;EAU1BC;IARF;IAES,WAAM,GAAW,SAAS,EAAC;IAC1B,kBAAa,GAAyB,IAAIF,YAAY,EAAU,EAAE;EAK1D;;EAEhBG,QAAQ;IACN;IACAC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC/C;EAGAC,WAAW,CAACC,OAAsB;IAChCH,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEE,OAAO,CAAC,QAAQ,CAAC,CAACC,aAAa,CAAC;IACvEJ,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEE,OAAO,CAAC,QAAQ,CAAC,CAACE,YAAY,CAAC;EACxF;EAEAC,WAAW;IACTN,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;EAC3D;EAIA;;;;;EAMA;EACA;EACAM,oBAAoB;IAClB,IAAI,CAACC,aAAa,CAACC,IAAI,CAAE,SAAS,IAAI,CAACC,MAAM,6CAA6C,CAAC,CAAC,CAAC;EAC/F;;;AAvCWb,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAAc;EAAAC;IAAAF;EAAA;EAAAG;IAAAL;EAAA;EAAAM;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCP5BC,0BAAI;MAAAA,YAAmB;MAAAA,iBAAK;MAC5BA,wBAOK;MAELA,6BAAiC;MAC7BA,+BACJ;MAAAA,iBAAK;MAELA,iCAA0D;MAAjCA;QAAA,OAASC,0BAAsB;MAAA,EAAC;MAACD,2DAA2C;MAAAA,iBAAS;;;MAd1GA,eAAmB;MAAnBA,qDAAmB;MACnBA,eAAsD;MAAtDA,wEAAsD;MAStDA,eAA4B;MAA5BA,oDAA4B","names":["EventEmitter","SaludoComponent","constructor","ngOnInit","console","log","ngOnChanges","changes","previousValue","currentValue","ngOnDestroy","enviarMensajeAlPadre","mensajeEmiter","emit","nombre","selectors","inputs","outputs","features","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Guedys\\Documents\\ANGULAR\\OPEN-BOOT-CAMP\\Curso-de-Angular-OpenBootCamp\\HolaMundo\\src\\app\\components\\saludo\\saludo.component.ts","C:\\Users\\Guedys\\Documents\\ANGULAR\\OPEN-BOOT-CAMP\\Curso-de-Angular-OpenBootCamp\\HolaMundo\\src\\app\\components\\saludo\\saludo.component.html"],"sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-saludo',\n  templateUrl: './saludo.component.html',\n  styleUrls: ['./saludo.component.scss']\n})\nexport class SaludoComponent implements OnInit, OnDestroy, OnChanges {\n \n//aqui deben declararce las variables. ejemplo const\n\n@Input() nombre: string = 'Anonimo' //del padre al hijo\n@Output() mensajeEmiter: EventEmitter<string> = new EventEmitter<string>()  //sirve para gestionar eventos de abajo hacia arriba,  hijo al padre, el componente superiro debe siempre tener la logica\n\n\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n    //instrucciones previas a la renderizacion del componente\n    console.log('ngOnInit del componente saludo')\n  }\n\n  \n  ngOnChanges(changes: SimpleChanges): void {\n    console.log('CAMBIO: valor anterior:', changes['nombre'].previousValue);\n    console.log('ngOnChange el componente recibe cambios', changes['nombre'].currentValue);\n  }\n\n  ngOnDestroy(): void {\n    console.log('ngOnDestroy el componente va a desaparecer');\n  }\n\n  \n\n  /*aqui se ve en que consiste los metodos, y esto es lo que desencadena los eventos. \n  en este casovamos a hacer un metodo para gestionar una alerta.\n  alertaSaludo(): void {\n    alert (`hola, ${this.nombre}, alerta despachada desde un click de boton`);\n  }*/\n\n  //ahora utilizando el ejemplo modificado de arriba vamos a gestionar un evento de tipo click\n  //en el DOM y enviar un texto al componente padre, despues esto se debe pintar en el html\n  enviarMensajeAlPadre(): void {\n    this.mensajeEmiter.emit (`hola, ${this.nombre}, alerta despachada desde un click de boton`); //no se puede ejecutar un object porque en el @output esta asignado como <string>\n  }\n\n}\n","<h1>!Hola {{ nombre }}¡</h1>\n<h3 [ngClass]=\"nombre == 'Anonimo' ? 'anonimo' : 'saludo'\" id=\"usuario\" [innerText]=\"nombre\">\n\n    <!--ngClass => nos permite pasarle valores literales o propiedades del controlador (esto es renderizado condicional utilizando etiquetas)-->\n\n    <!--no indicamos nada en las estiquetas sino que el valor viene definido en la propiedad.\n    podemos acceder a todas las propiedad de elementos html y modificarlas con un valor que se encuentre en typescript\n    el innertext que es aquello que se establece dentro de las etiquetas-->\n</h3>\n\n<h5 [ngStyle]=\"{ color: 'blue'}\"> <!--esto puede ser una variable del ts o tambien se puede injectar directamente aqui-->\n    hola que tal\n</h5>\n\n<button id=\"emit-alerta\" (click)=\"enviarMensajeAlPadre()\">enviar mensaje de saludo al compnente padre</button> <!--para emitir la alerta hay que hacer la logica del boton-->\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}